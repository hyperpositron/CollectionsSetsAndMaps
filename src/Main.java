import java.util.*;


public class Main {


    private static final Random RANDOM = new Random();

    public static void main(String[] args) {
        List<Integer> nums = generateInts(20);
        System.out.println("Сгенерированные числа " + nums);
        task1(nums);
        task2(nums);
        task3(List.of("test","Test","tEst","teSt","tesT","est","tet","tet","tet"));
        task4(List.of("test","Test","tEst","teSt","tesT","est","tet","tet","tet"));
    }

    private static List<Integer> generateInts(int n) {
        List<Integer> list = new ArrayList<>(n);
        for (int i = 0; i < n; i++) {
            list.add(RANDOM.nextInt(8));
        }

        return list;
    }

//Напишите код, с помощью которого можно напечатать только нечетные числа в консоль. Код должен работать
// с любой последовательностью и объемом списка чисел.
//В качестве отладочной информации можете использовать список чисел
//    - Критерии проверки:
//    - В консоль выводятся только нечетные числа
//    - Код работает с любой последовательностью и объемом списка чисел.

    private static void task1(List<Integer> nums) {
        System.out.println("ЗАДАЧА №1");
        for (Integer number : nums) {
            if (number % 2 == 1) {
                System.out.print(number + " ");
            }
        }
        System.out.println();
        System.out.println("==================================================");
    }

//Напишите код, с помощью которого можно напечатать только четные числа без повторений в порядке возрастания.
//Код должен работать с любой последовательностью и объемом списка чисел.
//В качестве отладочной информации можете использовать список чисел
//     - Критерии проверки:
//    - В консоль выводятся только четные числа
//    - В консоль выводятся все числа выводятся в порядке возрастания
//    - Ни одно число не повторяется
//    - Код работает с любой последовательностью и объемом списка чисел..

    private static void task2(List<Integer> nums) {
        System.out.println("ЗАДАЧА №2");
        Set<Integer> set = new TreeSet<>(nums);
        for (Integer number : set) {
            if (number % 2 == 0) {
                System.out.print(number + " ");
            }
        }
        System.out.println();
        System.out.println("==================================================");
    }

//Напишите код, который выводит в консоль все уникальные слова из списка слов, в котором могут встречаться дубли.
//В качестве отладочной информации возьмите произвольный набор слов или текст, в котором встречаются повторения.
//Код должен работать с любой последовательностью и объемом списка слов.
//     - Критерии проверки:
//    - В консоль выводятся только уникальные слова из списка слов
//    - Код работает с любой последовательностью и объемом списка слов.

    private static void task3(List<String> words) {
        System.out.println("ЗАДАЧА №3");
        for (String word : words) {
            if (Collections.frequency(words, word)==1) {
                System.out.print(word + " ");
            }
        }
        System.out.println();
        System.out.println("==================================================");
    }

    //Напишите код, который выводит в консоль все количество дублей из списка слов.
    //*Например, у вас есть текст из 6 слов, в котором есть одно слово, которое повторяется.
    // В таком случае в консоли выведется результат "2", то есть то количество элементов, которые повторяются.*
    //В качестве отладочной информации возьмите произвольный набор слов или текст, в котором встречаются повторения.
    //Код должен работать с любой последовательностью и объемом списка слов.
    //     - Критерии проверки:
    //    - В консоль выводится число повторений одного слова
    //    - Если в одном тексте разные слова повторяются, то в консоль нужно вывести несколько чисел
    //    - Порядок числовых значений в консоли значения не имеет
    //    - Код работает с любой последовательностью и объемом списка слов.

    private static void task4(List<String> words) {
        System.out.println("ЗАДАЧА №4");
        Map<String, Integer> map = new TreeMap<>();
        for (String word : words) {
            if (!map.containsKey(word)) {
                map.put(word, 1);
            } else {
                map.replace(word, map.get(word) + 1);
            }
        }
        System.out.println(map);
        System.out.println("==================================================");
    }
}